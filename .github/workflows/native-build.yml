name: http-record
on:
  push:
    tags:
      - "v*"
    branches:
      - 'master'
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  
jobs:
  build-jar-job:
    name: 'Build JAR'
    runs-on: ubuntu-latest

    steps:

      - name: 'Checkout'
        uses: actions/checkout@v2

      - name: 'Setup Java 11'
        uses: actions/setup-java@v2.5.0
        with:
          java-version: 11
          distribution: 'temurin'

      - name: 'Build JAR'
        run: |
          ./gradlew shadowJar

      - name: 'Get Version Number'
        run: |
          echo "VERSION=$(./gradlew properties -q | grep "version:" | awk '{print $2}')" >> $GITHUB_ENV

      - name: 'Publish JAR'
        uses: actions/upload-artifact@v2.3.1
        with:
          name: 'http-record-${{env.VERSION}}-all.jar'
          path: build/libs/*-all.jar

      - name: 'Create Release'
        if: contains(github.ref, 'v')
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        with:
          tag_name: ${{github.ref}}
          release_name: Release ${{github.ref}}
          body: |
            Initial release
          draft: false
          prerelease: false

      - name: 'Upload Release Asset'
        if: contains(github.ref, 'v')
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        with:
          upload_url: ${{steps.create_release.outputs.upload_url}}
          asset_path: build/libs/http-record-${{env.VERSION}}-all.jar
          asset_name: http-record-${{env.VERSION}}-all.jar
          asset_content_type: application/java-archive


      - name: 'Write Upload URL To File'
        if: contains(github.ref, 'v')
        run: |
          echo "${{steps.create_release.outputs.upload_url}}" > upload_url.txt

      - name: 'Publish Upload URL'
        if: contains(github.ref, 'v')
        uses: actions/upload-artifact@v2-preview
        with:
          name: 'upload_url.txt'
          path: 'upload_url.txt'

      - name: Log in to the Container registry
        uses: docker/login-action@v2.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4.0.1
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            
      - name: Build and push Docker image
        uses: docker/build-push-action@v3.1.1
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          file: Dockerfile_native
          
  build-non-windows-image:
    name: 'Build Non-Windows Image'
    needs: [build-jar-job]
    strategy:
      matrix:
        os: ['ubuntu-latest', 'macos-latest']
        include:
          - os: 'ubuntu-latest'
            label: 'linux'
          - os: 'macos-latest'
            label: 'macos'
    runs-on: ${{matrix.os}}

    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2

      - name: 'Setup Java 11'
        uses: actions/setup-java@v1
        with:
          java-version: 11

      - name: 'Setup GraalVM Environment'
        uses: DeLaGuardo/setup-graalvm@5.0
        with:
          graalvm: '21.3.0'
          java: 'java11'

      - name: 'Install Native Image Plugin'
        run: |
          gu install native-image

      - name: 'Get Version Number'
        run: |
          echo "VERSION=$(./gradlew properties -q | grep "version:" | awk '{print $2}')" >> $GITHUB_ENV

      - name: 'Get JAR Artifact'
        uses: actions/download-artifact@v2-preview
        with:
          name: 'http-record-${{env.VERSION}}-all.jar'

      - name: 'Get Release URL'
        if: contains(github.ref, 'v')
        uses: actions/download-artifact@v2-preview
        with:
          name: 'upload_url.txt'

      - name: 'Get Upload URL'
        if: contains(github.ref, 'v')
        run: |
          echo "UPLOAD_URL=$(cat upload_url.txt)" >> $GITHUB_ENV

      - name: 'Build Native Image'
        run: |
          native-image --static --no-fallback --report-unsupported-elements-at-runtime \
          --install-exit-handlers --allow-incomplete-classpath --initialize-at-build-time=io.ktor,kotlinx,kotlin,ch.qos.logback \
          -H:+ReportUnsupportedElementsAtRuntime -H:+ReportExceptionStackTraces \
          -H:ReflectionConfigurationFiles=reflection.json -jar http-record-${{env.VERSION}}-all.jar

      - name: 'Publish Native Image'
        if: success()
        uses: actions/upload-artifact@v2-preview
        with:
          name: 'http-record-${{env.VERSION}}-${{matrix.label}}'
          path: 'http-record-${{env.VERSION}}-all'

      - name: 'Release Native Image Asset'
        if: success() && contains(github.ref, 'v')
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        with:
          upload_url: ${{env.UPLOAD_URL}}
          asset_name: 'http-record-${{env.VERSION}}-${{matrix.label}}'
          asset_path: 'http-record-${{env.VERSION}}-all'
          asset_content_type: application/octet-stream
          
  build-windows-image:
    needs: [build-jar-job]
    name: 'Build Windows Image'
    runs-on: windows-latest

    steps:

      - name: 'Checkout'
        uses: actions/checkout@v1

      - name: 'Download GraalVM'
        run: |
          Invoke-RestMethod -Uri https://github.com/graalvm/graalvm-ce-builds/releases/download/vm-21.3.0/graalvm-ce-java11-windows-amd64-21.3.0.zip -OutFile 'graal.zip'

      - name: 'Install GraalVM'
        run: |
          Expand-Archive -path 'graal.zip' -destinationpath '.'

      - name: 'Install Native Image'
        run: |
          graalvm-ce-java11-21.3.0\bin\gu.cmd install native-image

      - name: 'Set up Visual C Build Tools Workload for Visual Studio 2017 Build Tools'
        run: |
          choco install visualstudio2017-workload-vctools

      - name: 'Get Version Number'
        run: |
          echo "VERSION=$(./gradlew properties -q | grep "version:" | awk '{print $2}')" >> $GITHUB_ENV
        shell: bash

      - name: 'Get JAR Artifact'
        uses: actions/download-artifact@v2-preview
        with:
          name: 'http-record-${{env.VERSION}}-all.jar'

      - name: 'Build Native Image'
        shell: cmd
        env:
          JAVA_HOME: ./graalvm-ce-java11-21.3.0
        run: |
          call "C:\Program Files (x86)\Microsoft Visual Studio\2017\BuildTools\VC\Auxiliary\Build\vcvars64.bat"
          ./graalvm-ce-java11-21.3.0/bin/native-image --static --no-fallback --report-unsupported-elements-at-runtime --install-exit-handlers --allow-incomplete-classpath --initialize-at-build-time=io.ktor,kotlinx,kotlin,ch.qos.logback -H:+ReportUnsupportedElementsAtRuntime -H:+ReportExceptionStackTraces -H:ReflectionConfigurationFiles=reflection.json -jar http-record-${{env.VERSION}}-all.jar

      - name: 'Get Release URL'
        if: contains(github.ref, 'v')
        uses: actions/download-artifact@v2-preview
        with:
          name: 'upload_url.txt'

      - name: 'Get Upload URL'
        if: contains(github.ref, 'v')
        run: |
          echo "UPLOAD_URL=$(cat upload_url.txt)" >> $GITHUB_ENV
        shell: bash

      - name: 'Publish Windows Image'
        if: success()
        uses: actions/upload-artifact@v2-preview
        with:
          name: 'http-record-${{env.VERSION}}-windows.exe'
          path: 'http-record-${{env.VERSION}}-all.exe'

      - name: 'Release Windows Image Asset'
        if: success() && contains(github.ref, 'v')
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        with:
          upload_url: ${{env.UPLOAD_URL}}
          asset_name: 'http-record-${{env.VERSION}}-windows.exe'
          asset_path: 'http-record-${{env.VERSION}}-all.exe'
          asset_content_type: application/octet-stream
